# ========================================
# MediTrack - Docker Compose Configuration
# ========================================

version: '3.8'

services:
  # Main Application
  meditrack-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: meditrack-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      # Supabase Configuration
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      # App Configuration
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - meditrack-network

  # Development Service (Optional)
  meditrack-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: meditrack-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      # Supabase Configuration
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      # App Configuration
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3001}
    env_file:
      - .env.local
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - meditrack-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: meditrack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - meditrack-app
    restart: unless-stopped
    profiles:
      - production
    networks:
      - meditrack-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: meditrack-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - production
    networks:
      - meditrack-network

  # PostgreSQL (Optional - if not using Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: meditrack-postgres
    environment:
      - POSTGRES_DB=meditrack
      - POSTGRES_USER=meditrack_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-meditrack_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    profiles:
      - local-db
    networks:
      - meditrack-network

# Volumes
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local

# Networks
networks:
  meditrack-network:
    driver: bridge 