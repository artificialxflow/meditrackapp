# ========================================
# MediTrack - Production Docker Compose
# ========================================

version: '3.8'

services:
  # Main Application
  meditrack-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: meditrack-app-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      # Supabase Configuration
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      # App Configuration
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - meditrack-network
    volumes:
      - app-logs:/app/logs

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: meditrack-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - meditrack-app
    restart: unless-stopped
    networks:
      - meditrack-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: meditrack-redis-prod
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - meditrack-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: meditrack-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - meditrack-network

  # Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: meditrack-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - meditrack-network

# Volumes
volumes:
  redis-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Networks
networks:
  meditrack-network:
    driver: bridge 