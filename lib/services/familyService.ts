import { supabase } from '../supabase/client';

// Interfaces for family data
export interface Family {
  id?: string;
  name: string;
  description?: string | null;
  created_by: string;
}

export interface FamilyMember {
  id?: string;
  family_id: string;
  profile_id: string;
  role: 'owner' | 'admin' | 'caregiver' | 'viewer';
  profiles?: { // Added profiles data for easier display
    full_name: string;
    email: string;
  } | null;
}

export class FamilyService {

  // Create a new family
  static async createFamily(userId: string, familyData: { name: string; description?: string }): Promise<Family> {
    try {
      const { data, error } = await supabase
        .from('families')
        .insert([{ ...familyData, created_by: userId }])
        .select()
        .single();

      if (error) throw error;

      // Automatically add the creator as the owner
      await this.addFamilyMember(data.id, userId, 'owner');

      return data;
    } catch (error) {
      console.error('Error creating family:', error);
      throw error;
    }
  }

  // Add a member to a family
  static async addFamilyMember(familyId: string, profileId: string, role: 'owner' | 'admin' | 'caregiver' | 'viewer'): Promise<FamilyMember> {
    try {
      const { data, error } = await supabase
        .from('family_members')
        .insert([{ family_id: familyId, profile_id: profileId, role }])
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error adding family member:', error);
      throw error;
    }
  }

  // Get all families for a user
  static async getFamilies(userId: string): Promise<Family[]> {
    try {
      const { data, error } = await supabase
        .from('family_members')
        .select('families(*)')
        .eq('profile_id', userId);

      if (error) throw error;
      return data.map(item => item.families).filter(Boolean) as Family[];
    } catch (error) {
      console.error('Error fetching families:', error);
      throw error;
    }
  }

  // Get all members for a specific family, including their profile data
  static async getFamilyMembers(familyId: string): Promise<FamilyMember[]> {
    try {
      const { data, error } = await supabase
        .from('family_members')
        .select('*, profiles(full_name, email)') // Select all from family_members and specific fields from profiles
        .eq('family_id', familyId);

      if (error) throw error;
      return data as FamilyMember[];
    } catch (error) {
      console.error('Error fetching family members:', error);
      throw error;
    }
  }

  // Find a user profile by email
  static async findProfileByEmail(email: string): Promise<{ id: string; email: string } | null> {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('id, email')
        .eq('email', email)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 means no rows found
        throw error;
      }
      return data;
    } catch (error) {
      console.error('Error finding profile by email:', error);
      throw error;
    }
  }

  // Invite a user to a family
  static async inviteFamilyMember(familyId: string, invitedEmail: string, invitedByUserId: string): Promise<any> {
    try {
      const { data, error } = await supabase
        .from('sharing_invitations')
        .insert([
          {
            patient_id: null, // This invitation is for a family, not a specific patient
            invited_email: invitedEmail,
            invited_by: invitedByUserId,
            // invitation_code will be generated by DB trigger
            // permission_level will default to 'view_only'
          }
        ])
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error inviting family member:', error);
      throw error;
    }
  }

  // Update a family member's role
  static async updateFamilyMemberRole(familyMemberId: string, newRole: 'owner' | 'admin' | 'caregiver' | 'viewer'): Promise<FamilyMember> {
    try {
      const { data, error } = await supabase
        .from('family_members')
        .update({ role: newRole })
        .eq('id', familyMemberId)
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error updating family member role:', error);
      throw error;
    }
  }
}
